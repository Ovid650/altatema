using System;

public abstract class BankAccount
{
    private string _accountNumber;
    private decimal _balance;

    public string AccountNumber
    {
        get { return _accountNumber; }
        protected set { _accountNumber = value; }
    }

    public decimal Balance
    {
        get { return _balance; }
        protected set { _balance = value; }
    }

    public BankAccount(string accountNumber, decimal balance)
    {
        _accountNumber = accountNumber;
        _balance = balance;
    }

    public abstract void Deposit(decimal amount);
    public abstract void Withdraw(decimal amount);
}

public class SavingsAccount : BankAccount
{
    public decimal InterestRate { get; private set; }

    public SavingsAccount(string accountNumber, decimal balance, decimal interestRate)
        : base(accountNumber, balance)
    {
        InterestRate = interestRate;
    }

    public override void Deposit(decimal amount)
    {
        if (amount <= 0)
            throw new ArgumentException("The deposit amount must be greater than zero.");
        Balance += amount;
    }

    public override void Withdraw(decimal amount)
    {
        if (amount > Balance)
            throw new InvalidOperationException("Insufficient funds.");
        Balance -= amount;
    }
}

public class CheckingAccount : BankAccount
{
    public decimal OverdraftLimit { get; private set; }

    public CheckingAccount(string accountNumber, decimal balance, decimal overdraftLimit)
        : base(accountNumber, balance)
    {
        OverdraftLimit = overdraftLimit;
    }

    public override void Deposit(decimal amount)
    {
        if (amount <= 0)
            throw new ArgumentException("The deposit amount must be greater than zero.");
        Balance += amount;
    }

    public override void Withdraw(decimal amount)
    {
        if (amount > Balance + OverdraftLimit)
            throw new InvalidOperationException("Overdraft limit exceeded.");
        Balance -= amount;
    }
}
